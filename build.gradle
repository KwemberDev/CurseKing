buildscript {
    repositories {
        maven {
            url = 'https://maven.minecraftforge.net/'
        }
        maven {
            url = 'https://repo.spongepowered.org/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = "${mod_version}"
group = "${mod_id}"
archivesBaseName = "${mod_name}"

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            args "--username=InDev"

            jvmArg "-Dmixin.hotSwap=true"
            jvmArg "-Dmixin.checks.interfaces=true"

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'curseking.MixinLoader'
        }

        server {

            jvmArg "-Dmixin.hotSwap=true"
            jvmArg "-Dmixin.checks.interfaces=true"

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'curseking.MixinLoader'
        }
    }
}

mixin {
    add sourceSets.main, 'curseking.refmap.json'
}
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'https://maven.cleanroommc.com'
    }
    flatDir {
        dirs 'build/libs'
    }
    flatDir {
        dirs 'run/mods'
    }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation 'org.spongepowered:mixin:0.8.5'
    annotationProcessor('org.spongepowered:mixin:0.8.5:processor')
    testAnnotationProcessor('org.spongepowered:mixin:0.8.5:processor')
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'
    implementation ('zone.rong:mixinbooter:10.6') {
        transitive = false
    }
    annotationProcessor ('zone.rong:mixinbooter:10.6') {
        transitive = false
    }
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.12.2:3.0.31")
//    implementation name: 'SilentLib-1.12.2-3.0.14'
//    implementation name: 'ScalingHealth-1.12.2-1.3.42+147'
    compileOnly files('ScalingHealth-1.12.2-1.3.42+147.jar')
    compileOnly files('SilentLib-1.12.2-3.0.14.jar')
    implementation name: 'hooklib-3.17'
    implementation name: 'roth'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    filesMatching('mcmod.info') {
        expand 'mod_id': mod_id, 'mod_name': mod_name, 'version': project.version,
                'mcversion': minecraft_version, 'mod_description': mod_description,
                'mod_author': mod_author
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Version"   : "1",
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : mod_version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePluginContainsFMLMod": "true",
                "ForceLoadAsMod": "true", // Comment out for dev environment, uncomment for build
                'FMLCorePlugin': 'curseking.MixinLoader'
        ])
    }

    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar.finalizedBy('reobfJar')